3.9
	0110 1001
+	0010 1010
------------------
	0111 1111 => 127 in decimal

3.10
	0110 1001
+	1101 0110
------------------
	0011 1111 => 63 in decimal

3.11
	1001 0111
+	1101 0110
------------------
	1111 1111 =>255 in decimal

3.13
62_hex = 0110 0010_bin
12_hex = 0001 0010_bin

Iteration	Step				Multiplier	Multiplicand	Product(upper 32 bits)
						(lower 32 bits
						of Product)

0		init value			0001 0010	0000 0110 0010	0000 0000 | 0000 0000

1		1:0 =>No op			0001 0010	0000 0110 0010	0000 0000 | 0000 0000
		2:Shift left Mcand		0001 0010	0000 1100 0100	0000 0000 | 0000 0000
		3:Shift right Prod		0000 1001	0000 1100 0100 	0000 0000 | 0000 0000
										            .
2		1a:1 =>Prod+=Mcand		0000 1001	0000 1100 0100 	0110 0010 | 0000 0000
		2:Shift left Mcand		0000 1001	0001 1000 1000	0110 0010 | 0000 0000
		3:Shift right Prod		0000 0100	0001 1000 1000	0011 0001 | 0000 0000
										             .
3		1:0 =>No op			0000 0100	0001 1000 1000 	0011 0001 | 0000 0000
		2:Shift left Mcand		0000 0100	0011 0001 0000	0011 0001 | 0000 0000
		3:Shift right Prod		0000 0010	0011 0001 0000	0001 1000 | 1000 0000
										              .
4		1:0 =>No op			0000 0100 	0011 0001 0000 	0001 1000 | 1000 0000
		2:Shift left Mcand		0000 0100 	0110 0010 0000	0001 1000 | 1000 0000
		3:Shift right Prod		0000 0001 	0110 0010 0000	0000 1100 | 0100 0000
										               .
5		1a: 1=> Prod+=Mcand		0000 0001	0110 0010 0000	0110 1110 | 0100 0000
		2:Shift left Mcand		0000 0001	0011 0001 0000	0110 1110 | 0100 0000
		3:Shift right Prod		0000 0000	0011 0001 0000	0011 0111 | 0010 0000
										                 .
6-32		1:0 =>No op			0000 0000
		2:Shift left Mcand		0000 0000
		3:Shift right Prod		0000 0000
						....		......
end:						0110 1110 0100	0000 0000 0000	0000 0000 0000 0000

Thus, the product is: 0000 .... 0110 1110 0100 (64 bits)



3.18


Iteration	Step					Quotient	Divisor		Remainder
0		init value				000000		010001 000000	000000 111100

1		1:Rem-=Div				000000		010001 000000	101111 111100
		2b:Rem<0 => Rem+=Div, sll Q, Q0=0	000000		010001 000000   000000 111100
		3:Shift Div right			000000		001000 100000	000000 111100

2		2:Rem-=Div				000000		001000 100000	111000 011100
		2b:Rem<0 => Rem+=Div, sll Q, Q0=0	000000		001000 100000	000000 111100
		3:Shift Div right			000000		000100 010000	000000 111100

3		2:Rem-=Div				000000		000100 010000 	111100 101100
		2b:Rem<0 => Rem+=Div, sll Q, Q0=0 	000000		000100 010000	000000 111100
		3:Shift Div right			000000		000010 001000	000000 111100

4		2:Rem-=Div				000000		000010 001000	111110 110100
		2b:Rem<0 => Rem+=Div, sll Q, Q0=0	000000		000010 001000	000000 111100
		3:Shift Div right			000000		000001 000100	000000 111100

5		2:Rem-=Div				000000		000001 000100	111111 111000
		2b:Rem<0 => Rem+=Div, sll Q, Q0=0	000000		000001 000100 	000000 111100
		3:Shitf Div right			000000		000000 100010	000000 111100

6		2:Rem-=Div				000000		000000 100010 	000000 011010
		2a:Rem>=0 =>sll Q, Q0=1			000001		000000 100010 	000000 011010
		3:Shift Div right			000001		000000 010001	000000 011010

7		2:Rem-=Div				000001		000000 010001	000000 001001
		2a:Rem>=0 =>sll Q, Q0=1			000011		000000 010001	000000 001001
		3:Shift Div right			000011 		000000 001000	000000 001001

Thus, the Quotient is 3, and the remainder is 9 in decimal
